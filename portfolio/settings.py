# """
# Django settings for portfolio project.
#
# Generated by 'django-admin startproject' using Django 3.0.3.
#
# For more information on this file, see
# https://docs.djangoproject.com/en/3.0/topics/settings/
#
# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/3.0/ref/settings/
# """
#
# import os
# import dj_database_url
# from dotenv import load_dotenv
#
#
# load_dotenv()
# # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#
# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
#
# # # SECURITY WARNING: keep the secret key used in production secret!
# # SECRET_KEY = '=(b31tl1t&%)k8!4ep13b00rs3d4a^6p^u%w9x^i1(z(r&t!+('
# #
# # # SECURITY WARNING: don't run with debug turned on in production!
# # DEBUG = False
#
# # Load the secret key from an environment variable
# SECRET_KEY = os.environ.get('SECRET_KEY')
#
# # DEBUG is False in production, unless an environment variable says otherwise
# DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
#
# ALLOWED_HOSTS = ['purvsonani.onrender.com', 'localhost', '127.0.0.1']
#
# # Application definition
#
# INSTALLED_APPS = [
#     'home',
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'cloudinary_storage',  # Add this
#     'cloudinary',
# ]
#
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'whitenoise.middleware.WhiteNoiseMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]
#
# ROOT_URLCONF = 'portfolio.urls'
#
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': ['templates'],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
#
# WSGI_APPLICATION = 'portfolio.wsgi.application'
#
# # Database
# # https://docs.djangoproject.com/en/3.0/ref/settings/#databases
#
#
# # Production database URL is an environment variable. If it exists, use it.
# if 'DATABASE_URL' in os.environ:
#     DATABASES = {
#         'default': dj_database_url.config(conn_max_age=600)
#     }
# # Otherwise, use the local database settings for development.
# else:
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql',
#             'NAME': 'portfolio_db',  # The name of the database you created
#             'USER': 'purvsonani',  # The user you created
#             'PASSWORD': 'Purv@2809',  # The password you set
#             'HOST': 'localhost',  # Or '127.0.0.1'
#             'PORT': '5432',  # Default PostgreSQL port
#         }
#     }
#
# # Password validation
# # https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
#
# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]
#
# # Internationalization
# # https://docs.djangoproject.com/en/3.0/topics/i18n/
#
# LANGUAGE_CODE = 'en-us'
#
# TIME_ZONE = 'UTC'
#
# USE_I18N = True
#
# USE_L10N = True
#
# USE_TZ = True
#
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/3.0/howto/static-files/
#
# # STATIC_URL = '/static/'
# #
# # MEDIA_URL = '/media/'
# # MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# #
# # # Add this line if you have a global static folder
# # STATICFILES_DIRS = [
# #     os.path.join(BASE_DIR, "static"),  # Correct usage with os.path
# #     os.path.join(BASE_DIR, "assets"),  # Correct usage with os.path
# # ]
#
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/3.0/howto/static-files/
#
# STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#
# # MEDIA_URL = '/media/'
# # MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#
# # Use WhiteNoise to serve files in production
# if not DEBUG:
#     STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
#
#
# # Cloudinary Storage Settings
# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
#     'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
#     'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
# }
#
# DEFAULT_FILE_STORAGE = 'this.is.a.test.to.force.an.error'
# # DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'



import os
import dj_database_url
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = os.environ.get('SECRET_KEY')
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
ALLOWED_HOSTS = [
    'purvsonani.vercel.app',  # Your primary production domain
    'localhost',
    '127.0.0.1',
]

VERCEL_DEPLOYMENT_URL = os.environ.get('VERCEL_URL')
if VERCEL_DEPLOYMENT_URL:
    # Extract hostname by removing 'https://'
    hostname = VERCEL_DEPLOYMENT_URL.replace('https://', '')
    ALLOWED_HOSTS.append(hostname)

# You might also want to allow the branch-specific URL if you use preview branches
VERCEL_BRANCH_URL = os.environ.get('VERCEL_BRANCH_URL')
if VERCEL_BRANCH_URL:
    branch_hostname = VERCEL_BRANCH_URL.replace('https://', '')
    ALLOWED_HOSTS.append(branch_hostname)

# Ensure no duplicates (optional but clean)
ALLOWED_HOSTS = list(set(ALLOWED_HOSTS))

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'cloudinary',
    'home', # Your app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',]


ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Point to your templates dir
        'APP_DIRS': True,
        # ... context_processors
    },
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'

# Database Configuration
if 'DATABASE_URL' in os.environ:
    DATABASES = {'default': dj_database_url.config(conn_max_age=600, ssl_require=False)}
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'portfolio_db',
            'USER': 'purvsonani',
            'PASSWORD': 'Purv@2809',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Static & Media Files
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Cloudinary Storage
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
